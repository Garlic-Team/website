import{f as n}from"./app.f2e7eeb4.js";const s={},a=n('<h1 id="creating-your-first-inhibitor" tabindex="-1"><a class="header-anchor" href="#creating-your-first-inhibitor" aria-hidden="true">#</a> Creating your first inhibitor</h1><p>GCommands supports creating your own inhibitors to use in commands. You just need to create an <code>inhibitors</code> folder to put <code>OwnerOnly.js</code> in, for example.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">OwnerOnlyInhbitor</span> <span class="token punctuation">{</span>\n\t<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">ownerIds <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>ownerIds <span class="token operator">=</span> ownerIds <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token string">&#39;id1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ownerIds<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">userId</span> <span class="token operator">=&gt;</span> userId <span class="token operator">===</span> ctx<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> OwnerOnlyInhbitor<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>If you want different users in each command, just use the built-in UserOnlyInhibitor but if you want an inhibitor that already has users defined, you can make your own.</p><p>When you have your inhibitor ready, you import it in a command and use <code>new OwnerOnlyInhbitor()</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Command <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gcommands&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> OwnerOnlyInhbitor <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../inhibitors/OwnerOnlyInhibitor.js&#39;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;inhibitor-test&#39;</span><span class="token punctuation">,</span>\n    inhibitors<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token keyword">new</span> <span class="token class-name">OwnerOnlyInhbitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>other\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',6);s.render=function(n,s){return a};export{s as default};
