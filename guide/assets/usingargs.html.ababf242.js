import{r as n,o as s,c as a,a as p,b as t,w as o,F as e,f as c,d as u}from"./app.c4ed2249.js";const l={},r=c('<h1 id="using-arguments-in-commands" tabindex="-1"><a class="header-anchor" href="#using-arguments-in-commands" aria-hidden="true">#</a> Using arguments in commands</h1><p>Arguments in commands can make a lot of things easier for you. They can be used for ban/kick commands, or even for giving people a hug!</p><h2 id="all-argument-types" tabindex="-1"><a class="header-anchor" href="#all-argument-types" aria-hidden="true">#</a> All Argument Types</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> ArgumentType <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gcommands&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nArgumentType<span class="token punctuation">.</span><span class="token constant">NUMBER</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>\nArgumentType<span class="token punctuation">.</span><span class="token constant">MENTIONABLE</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>\nArgumentType<span class="token punctuation">.</span><span class="token constant">ROLE</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>\nArgumentType<span class="token punctuation">.</span><span class="token constant">CHANNEL</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>\nArgumentType<span class="token punctuation">.</span><span class="token constant">USER</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\nArgumentType<span class="token punctuation">.</span><span class="token constant">BOOLEAN</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\nArgumentType<span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\nArgumentType<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\nArgumentType<span class="token punctuation">.</span><span class="token constant">SUB_COMMAND_GROUP</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\nArgumentType<span class="token punctuation">.</span><span class="token constant">SUB_COMMAND</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',4),i=u("Learn more about SUB_COMMAND and SUB_COMMAND_GROUP "),k=u("here"),m=u("."),b=c('<h2 id="basic-arguments" tabindex="-1"><a class="header-anchor" href="#basic-arguments" aria-hidden="true">#</a> Basic arguments</h2><h3 id="create-a-new-command-with-arguments" tabindex="-1"><a class="header-anchor" href="#create-a-new-command-with-arguments" aria-hidden="true">#</a> Create a new command with arguments</h3><p>This is the template command we are going to use.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Command<span class="token punctuation">,</span> ArgumentType <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gcommands&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Command <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;hug&quot;</span><span class="token punctuation">,</span>\n      description<span class="token operator">:</span> <span class="token string">&quot;Hugs someone!&quot;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Next we need to add the arguments to the command. We can do this by adding the <code>args</code> option to the command.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>args<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Set the name of the argument</span>\n    type<span class="token operator">:</span> ArgumentType<span class="token punctuation">.</span><span class="token constant">USER</span><span class="token punctuation">,</span> <span class="token comment">// Set the type of the argument</span>\n    description<span class="token operator">:</span> <span class="token string">&quot;The user to hug!&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Set the description of the argument</span>\n    prompt<span class="token operator">:</span> <span class="token string">&quot;Who do you want to hug?&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Set the prompt for the argument (not required)</span>\n    required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Set if the argument is required or not</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>This creates a command with the argument &quot;user&quot;.</p><h3 id="using-the-arguments" tabindex="-1"><a class="header-anchor" href="#using-the-arguments" aria-hidden="true">#</a> Using the arguments</h3><p>Now we need to create the <code>run()</code> function.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> author<span class="token punctuation">,</span> client<span class="token punctuation">,</span> respond<span class="token punctuation">,</span> objectArgs <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Fetch the mentioned user</span>\n  <span class="token keyword">let</span> user <span class="token operator">=</span> objectArgs<span class="token punctuation">.</span>user\n    <span class="token operator">?</span> objectArgs<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>\n      <span class="token operator">?</span> client<span class="token punctuation">.</span>users<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>objectArgs<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> author\n      <span class="token operator">:</span> author\n    <span class="token operator">:</span> author<span class="token punctuation">;</span>\n\n  <span class="token comment">// If the user didn&#39;t mention anyone/mentioned themselves</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>id <span class="token operator">===</span> author<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">respond</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">**</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">** needs a hug!</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// If everything works</span>\n  <span class="token function">respond</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">**</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">** hugs **</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">**, aww!</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="resulting-code" tabindex="-1"><a class="header-anchor" href="#resulting-code" aria-hidden="true">#</a> Resulting code</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Command<span class="token punctuation">,</span> ArgumentType <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gcommands&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Command <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;hug&quot;</span><span class="token punctuation">,</span>\n      description<span class="token operator">:</span> <span class="token string">&quot;Hugs someone!&quot;</span><span class="token punctuation">,</span>\n      cooldown<span class="token operator">:</span> <span class="token string">&quot;2s&quot;</span><span class="token punctuation">,</span>\n      args<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>\n          type<span class="token operator">:</span> ArgumentType<span class="token punctuation">.</span><span class="token constant">USER</span><span class="token punctuation">,</span>\n          description<span class="token operator">:</span> <span class="token string">&quot;The user to hug!&quot;</span><span class="token punctuation">,</span>\n          prompt<span class="token operator">:</span> <span class="token string">&quot;Who do you want to hug?&quot;</span><span class="token punctuation">,</span>\n          required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> author<span class="token punctuation">,</span> client<span class="token punctuation">,</span> respond<span class="token punctuation">,</span> args <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> user <span class="token operator">=</span> objectArgs<span class="token punctuation">.</span>user\n      <span class="token operator">?</span> objectArgs<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>\n        <span class="token operator">?</span> client<span class="token punctuation">.</span>users<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>objectArgs<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> author\n        <span class="token operator">:</span> author\n      <span class="token operator">:</span> author<span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>id <span class="token operator">===</span> author<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token function">respond</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">**</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">** needs a hug!</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">respond</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">**</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>author<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">** hugs **</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">**, aww!</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="advanced-arguments" tabindex="-1"><a class="header-anchor" href="#advanced-arguments" aria-hidden="true">#</a> Advanced arguments</h2><h3 id="creating-a-new-command-with-arguments" tabindex="-1"><a class="header-anchor" href="#creating-a-new-command-with-arguments" aria-hidden="true">#</a> Creating a new command with arguments</h3><p>This time, we have some advanced stuff.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> ArgumentType<span class="token punctuation">,</span> Command <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gcommands&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> wait <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Command <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;bake&quot;</span><span class="token punctuation">,</span>\n      description<span class="token operator">:</span> <span class="token string">&quot;Bakes a product!&quot;</span><span class="token punctuation">,</span>\n      cooldown<span class="token operator">:</span> <span class="token string">&quot;2s&quot;</span><span class="token punctuation">,</span>\n      args<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&quot;product&quot;</span><span class="token punctuation">,</span>\n          type<span class="token operator">:</span> ArgumentType<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>\n          description<span class="token operator">:</span> <span class="token string">&quot;The product to bake!&quot;</span><span class="token punctuation">,</span>\n          prompt<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">What would you like to bake? (muffin/cookie)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n          choices<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n              name<span class="token operator">:</span> <span class="token string">&quot;Chocolate Chip Cookie&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Set the name for the choice</span>\n              value<span class="token operator">:</span> <span class="token string">&quot;cookie&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Set the value of the choice</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n              name<span class="token operator">:</span> <span class="token string">&quot;Chocolate Muffin&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Set the name for the choice</span>\n              value<span class="token operator">:</span> <span class="token string">&quot;muffin&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Set the value of the choice</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n          required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&quot;amount&quot;</span><span class="token punctuation">,</span>\n          type<span class="token operator">:</span> ArgumentType<span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">,</span> <span class="token comment">// Integer only allows full numbers</span>\n          description<span class="token operator">:</span>\n            <span class="token string">&quot;The amount of products to bake! You can only bake a maximum of 25 products at once&quot;</span><span class="token punctuation">,</span>\n          prompt<span class="token operator">:</span>\n            <span class="token string">&quot;How many products would you like to bake? You can only bake a maximum of 25 products at once&quot;</span><span class="token punctuation">,</span>\n          required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>This creates a new command with the &quot;product&quot; and &quot;amount&quot; argument. The &quot;product&quot; argument has 2 values to pick from: &quot;Chocolate Chip Cookie&quot; and &quot;Chocolate Muffin&quot;.</p><h3 id="using-the-arguments-1" tabindex="-1"><a class="header-anchor" href="#using-the-arguments-1" aria-hidden="true">#</a> Using the arguments</h3><p>The <code>args</code> can be accesed in the <code>CommandRunOptions</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> member<span class="token punctuation">,</span> respond<span class="token punctuation">,</span> edit<span class="token punctuation">,</span> objectArgs <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Cap the amount</span>\n  objectArgs<span class="token punctuation">.</span>amount <span class="token operator">=</span>\n    <span class="token function">parseInt</span><span class="token punctuation">(</span>objectArgs<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">25</span>\n      <span class="token operator">?</span> <span class="token number">25</span>\n      <span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>objectArgs<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span>\n      <span class="token operator">?</span> <span class="token number">0</span>\n      <span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>objectArgs<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Format the user&#39;s choices</span>\n  <span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>objectArgs<span class="token punctuation">.</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Delicious </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>objectArgs<span class="token punctuation">.</span>product<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    objectArgs<span class="token punctuation">.</span>product<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>objectArgs<span class="token punctuation">.</span>amount <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;s&quot;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Send the response</span>\n  <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">respond</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    content<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You decide to bake </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>product<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. You put it in the oven and wait.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Wait for the product to &quot;cook&quot;</span>\n  <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">5000</span> <span class="token operator">-</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Decide if the product is burnt (50% chance)</span>\n  <span class="token keyword">let</span> isBurnt <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Add a response</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isBurnt<span class="token punctuation">)</span>\n    m<span class="token punctuation">.</span>content <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n\\nOh no! Your </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>product<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n      objectArgs<span class="token punctuation">.</span>amount <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&quot;was&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;were&quot;</span>\n    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> left in the oven for too long and burnt! Try again.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    m<span class="token punctuation">.</span>content <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n\\nYou successfully baked your </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>product<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and gave </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n      objectArgs<span class="token punctuation">.</span>amount <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&quot;it&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;them&quot;</span>\n    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to your friends. They like it!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Edit the message</span>\n  <span class="token keyword">await</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> m<span class="token punctuation">.</span>content <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h3 id="resulting-code-1" tabindex="-1"><a class="header-anchor" href="#resulting-code-1" aria-hidden="true">#</a> Resulting code</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> ArgumentType<span class="token punctuation">,</span> Command <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gcommands&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> wait <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Command <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;bake&quot;</span><span class="token punctuation">,</span>\n      description<span class="token operator">:</span> <span class="token string">&quot;Bakes a product!&quot;</span><span class="token punctuation">,</span>\n      cooldown<span class="token operator">:</span> <span class="token string">&quot;2s&quot;</span><span class="token punctuation">,</span>\n      args<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&quot;product&quot;</span><span class="token punctuation">,</span>\n          type<span class="token operator">:</span> ArgumentType<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>\n          description<span class="token operator">:</span> <span class="token string">&quot;The product to bake!&quot;</span><span class="token punctuation">,</span>\n          prompt<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">What would you like to bake? (muffin/cookie)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n          choices<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token punctuation">{</span>\n              name<span class="token operator">:</span> <span class="token string">&quot;Chocolate Chip Cookie&quot;</span><span class="token punctuation">,</span>\n              value<span class="token operator">:</span> <span class="token string">&quot;cookie&quot;</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>\n              name<span class="token operator">:</span> <span class="token string">&quot;Chocolate Muffin&quot;</span><span class="token punctuation">,</span>\n              value<span class="token operator">:</span> <span class="token string">&quot;muffin&quot;</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">]</span><span class="token punctuation">,</span>\n          required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&quot;amount&quot;</span><span class="token punctuation">,</span>\n          type<span class="token operator">:</span> ArgumentType<span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">,</span>\n          description<span class="token operator">:</span> <span class="token string">&quot;The amount of products to bake! You can only bake a maximum of 25 products at once&quot;</span><span class="token punctuation">,</span>\n          prompt<span class="token operator">:</span> <span class="token string">&quot;How many products would you like to bake? You can only bake maximum of 25 products at once&quot;</span><span class="token punctuation">,</span>\n          required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">async</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> member<span class="token punctuation">,</span> respond<span class="token punctuation">,</span> edit<span class="token punctuation">,</span> objectArgs <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    objectArgs<span class="token punctuation">.</span>amount <span class="token operator">=</span>\n      <span class="token function">parseInt</span><span class="token punctuation">(</span>objectArgs<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">25</span>\n        <span class="token operator">?</span> <span class="token number">25</span>\n        <span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>objectArgs<span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span>\n        <span class="token operator">?</span> <span class="token number">0</span>\n        <span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>objectArgs<span class="token punctuation">.</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>objectArgs<span class="token punctuation">.</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> Delicious </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>objectArgs<span class="token punctuation">.</span>product<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n      objectArgs<span class="token punctuation">.</span>product<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>objectArgs<span class="token punctuation">.</span>amount <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;s&quot;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">respond</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      content<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You decide to bake </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>product<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. You put it in the oven and wait.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">5000</span> <span class="token operator">-</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> isBurnt <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isBurnt<span class="token punctuation">)</span>\n      m<span class="token punctuation">.</span>content <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n\\nOh no! Your </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>product<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n        objectArgs<span class="token punctuation">.</span>amount <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&quot;was&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;were&quot;</span>\n      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> left in the oven for too long and burnt! Try again.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span>\n      m<span class="token punctuation">.</span>content <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n\\nYou successfully baked your </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>product<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and gave </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n        objectArgs<span class="token punctuation">.</span>amount <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&quot;it&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;them&quot;</span>\n      <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to your friends. They like it!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n    <span class="token keyword">await</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> m<span class="token punctuation">.</span>content <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div>',22);l.render=function(c,u){const l=n("RouterLink");return s(),a(e,null,[r,p("p",null,[i,t(l,{to:"/gcommands-legacy/commands/usingsub.html"},{default:o((()=>[k])),_:1}),m]),b],64)};export{l as default};
