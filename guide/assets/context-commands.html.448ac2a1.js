import{r as n,o as s,c as a,a as t,b as p,w as e,F as o,d as c,f as u}from"./app.71f04ffe.js";const l={},r=t("h1",{id:"creating-your-context-menu-command",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#creating-your-context-menu-command","aria-hidden":"true"},"#"),c(" Creating your context menu command")],-1),i=c("Before we dive into the context menu commands see "),k=c("this"),m=t("br",null,null,-1),d=c(" If you don't know what context menu commands are, I'll tell you. You can only have 5 of these commands for user and 5 for message. There are no arguments, just discord will return a message/user."),b=u('<h2 id="context-message" tabindex="-1"><a class="header-anchor" href="#context-message" aria-hidden="true">#</a> Context Message</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Command<span class="token punctuation">,</span> CommandType <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gcommands&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;parse&#39;</span><span class="token punctuation">,</span>\n\tdescription<span class="token operator">:</span> <span class="token string">&#39;Parse message content&#39;</span><span class="token punctuation">,</span>\n\ttype<span class="token operator">:</span> <span class="token punctuation">[</span>CommandType<span class="token punctuation">.</span><span class="token constant">CONTEXT_MESSAGE</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t<span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> message <span class="token operator">=</span> ctx<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Parsed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="context-user" tabindex="-1"><a class="header-anchor" href="#context-user" aria-hidden="true">#</a> Context User</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Command<span class="token punctuation">,</span> CommandType <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;gcommands&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;parse&#39;</span><span class="token punctuation">,</span>\n\tdescription<span class="token operator">:</span> <span class="token string">&#39;Parse user id&#39;</span><span class="token punctuation">,</span>\n\ttype<span class="token operator">:</span> <span class="token punctuation">[</span>CommandType<span class="token punctuation">.</span><span class="token constant">CONTEXT_USER</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t<span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> user <span class="token operator">=</span> ctx<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Parsed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Don&#39;t forget that GCommands is unique precisely in that you can have, for example, Context Menu Message, Context Menu User, Slash command in a single file in a single function.</p>',5);l.render=function(c,u){const l=n("RouterLink");return s(),a(o,null,[r,t("p",null,[i,p(l,{to:"/commands/first-command.html"},{default:e((()=>[k])),_:1}),m,d]),b],64)};export{l as default};
