import{f as n}from"./app.32387495.js";const s={},a=n('<h1 id="the-alwaysobtain-option-in-commands" tabindex="-1"><a class="header-anchor" href="#the-alwaysobtain-option-in-commands" aria-hidden="true">#</a> The alwaysObtain option in commands</h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>alwaysObtain</code> only affects message commands.</p></div><p>The <code>alwaysObtain</code> option does a simple thing. Arguments in the first message initiating the command do not count.</p><p>This example is to showcase in which cases <code>alwaysObtain</code> would be useful:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Command<span class="token punctuation">,</span> ArgumentType <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gcommands&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Command <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&quot;repeat&quot;</span><span class="token punctuation">,</span>\n      description<span class="token operator">:</span> <span class="token string">&quot;Repeat this please&quot;</span><span class="token punctuation">,</span>\n      alwaysObtain<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// Or true</span>\n      args<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&#39;channel&#39;</span><span class="token punctuation">,</span> <span class="token comment">// This argument is just a example, we will not use it</span>\n          description<span class="token operator">:</span> <span class="token string">&#39;channel&#39;</span><span class="token punctuation">,</span>\n          type<span class="token operator">:</span> ArgumentType<span class="token punctuation">.</span><span class="token constant">CHANNEL</span><span class="token punctuation">,</span>\n          required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          name<span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span>\n          description<span class="token operator">:</span> <span class="token string">&#39;A string&#39;</span><span class="token punctuation">,</span>\n          type<span class="token operator">:</span> ArgumentType<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>\n          required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> respond<span class="token punctuation">,</span> objectArgs <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">respond</span><span class="token punctuation">(</span>objectArgs<span class="token punctuation">.</span>string<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>',5);s.render=function(n,s){return a};export{s as default};
