import{r as n,o as s,c as a,a as t,b as p,w as e,F as o,d as c,f as l}from"./app.12b70596.js";const u={},r=t("h1",{id:"events",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#events","aria-hidden":"true"},"#"),c(" Events")],-1),i=c("Hyttpo emits events as well as the normal built-in "),k={href:"https://nodejs.org/api/http.html",target:"_blank",rel:"noopener noreferrer"},d=c("http"),b=c(" library, so you can, for example, create a progress bar for downloading."),m={class:"custom-container danger"},h=t("p",{class:"custom-container-title"},"DANGER",-1),g=c("You can use "),f=c("await"),v=c(", but you have to use events in config."),y=l('<h3 id="all-events-eventemitter" tabindex="-1"><a class="header-anchor" href="#all-events-eventemitter" aria-hidden="true">#</a> All events (EventEmitter):</h3><ul><li>data (only node.js)</li><li>error</li><li>end</li><li>response (only node.js)</li><li>downloadProgress (only browser)</li><li>uploadProgress (only browser)</li></ul><h3 id="all-events-in-payloadrequest" tabindex="-1"><a class="header-anchor" href="#all-events-in-payloadrequest" aria-hidden="true">#</a> All events (In PayloadRequest):</h3><ul><li>onData (only node.js)</li><li>onError</li><li>onEnd</li><li>onResponse (only node.js)</li><li>onDownloadProgress (only browser)</li><li>onUploadProgress (only browser)</li></ul><h2 id="example-code-eventemitter" tabindex="-1"><a class="header-anchor" href="#example-code-eventemitter" aria-hidden="true">#</a> Example code (EventEmitter)</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> hyttpo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;hyttpo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n\nhyttpo<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    method<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>\n    url<span class="token operator">:</span> <span class="token string">&#39;url&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Done!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="example-code-in-payloadrequest" tabindex="-1"><a class="header-anchor" href="#example-code-in-payloadrequest" aria-hidden="true">#</a> Example code (In PayloadRequest)</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> hyttpo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;hyttpo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n\n<span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> hyttpo<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        method<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>\n        url<span class="token operator">:</span> <span class="token string">&#39;url&#39;</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">onData</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">onEnd</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">)</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',8);u.render=function(c,l){const u=n("OutboundLink"),w=n("RouterLink");return s(),a(o,null,[r,t("p",null,[i,t("a",k,[d,p(u)]),b]),t("div",m,[h,t("p",null,[g,p(w,{to:"/hyttpo/other/async.html"},{default:e((()=>[f])),_:1}),v])]),y],64)};export{u as default};
